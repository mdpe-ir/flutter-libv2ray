// Autogenerated from Pigeon (v0.1.22), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import

import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class StartRequest {
  String? config;

  Object encode() {
    final Map<Object, Object?> pigeonMap = <Object, Object?>{};
    pigeonMap['config'] = config;
    return pigeonMap;
  }

  static StartRequest decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return StartRequest()
      ..config = pigeonMap['config'] as String?;
  }
}

class StatusReply {
  int? status;

  Object encode() {
    final Map<Object, Object?> pigeonMap = <Object, Object?>{};
    pigeonMap['status'] = status;
    return pigeonMap;
  }

  static StatusReply decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return StatusReply()
      ..status = pigeonMap['status'] as int?;
  }
}

class V2rayApi {
  Future<void> start(StartRequest arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.V2rayApi.start', StandardMessageCodec());
    final Map<Object, Object>? replyMap = await channel.send(encoded) as Map<Object, Object>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> stop() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.V2rayApi.stop', StandardMessageCodec());
    final Map<Object, Object>? replyMap = await channel.send(null) as Map<Object, Object>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<StatusReply> status() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.V2rayApi.status', StandardMessageCodec());
    
    final Map<Object, Object> replyMap = await channel.send(null) as Map<Object, Object>;

    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return StatusReply.decode(replyMap['result']!);
    }
  }
}
